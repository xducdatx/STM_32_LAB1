
Ex_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001730  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800183c  0800183c  0001183c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001860  08001860  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001860  08001860  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001860  08001860  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001860  08001860  00011860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001864  08001864  00011864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001874  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001874  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003092  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e9d  00000000  00000000  000230c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e8  00000000  00000000  00023f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000360  00000000  00000000  00024350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001560b  00000000  00000000  000246b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004859  00000000  00000000  00039cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079b56  00000000  00000000  0003e514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b806a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000da0  00000000  00000000  000b80c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001824 	.word	0x08001824

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001824 	.word	0x08001824

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fc63 	bl	8000a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8c2 	bl	80002de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8fb 	bl	8000354 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
     int count1 = 0;
 800015e:	2300      	movs	r3, #0
 8000160:	617b      	str	r3, [r7, #20]
     int count2 = 0;
 8000162:	2300      	movs	r3, #0
 8000164:	613b      	str	r3, [r7, #16]
     int counter = 0;
 8000166:	2300      	movs	r3, #0
 8000168:	60fb      	str	r3, [r7, #12]
     int status1 = 0;
 800016a:	2300      	movs	r3, #0
 800016c:	60bb      	str	r3, [r7, #8]
     int status2 = 2;
 800016e:	2302      	movs	r3, #2
 8000170:	607b      	str	r3, [r7, #4]
     while (1)
     {
   	  /* USER CODE END WHILE */
     	  if (count1 == 0)
 8000172:	697b      	ldr	r3, [r7, #20]
 8000174:	2b00      	cmp	r3, #0
 8000176:	d14c      	bne.n	8000212 <main+0xc6>
     	  	  {
     		  	  if (status1 == 0)
 8000178:	68bb      	ldr	r3, [r7, #8]
 800017a:	2b00      	cmp	r3, #0
 800017c:	d116      	bne.n	80001ac <main+0x60>
     		  	  {
     		  		  led_on(1);
 800017e:	2001      	movs	r0, #1
 8000180:	f000 f93c 	bl	80003fc <led_on>
     		  		  led_off(2);
 8000184:	2002      	movs	r0, #2
 8000186:	f000 f9b3 	bl	80004f0 <led_off>
     		  		  led_off(3);
 800018a:	2003      	movs	r0, #3
 800018c:	f000 f9b0 	bl	80004f0 <led_off>
     		  		  led_on(7);
 8000190:	2007      	movs	r0, #7
 8000192:	f000 f933 	bl	80003fc <led_on>
     		  		  led_off(8);
 8000196:	2008      	movs	r0, #8
 8000198:	f000 f9aa 	bl	80004f0 <led_off>
     		  		  led_off(9);
 800019c:	2009      	movs	r0, #9
 800019e:	f000 f9a7 	bl	80004f0 <led_off>
     		  		  status1 = 2;
 80001a2:	2302      	movs	r3, #2
 80001a4:	60bb      	str	r3, [r7, #8]
     		  		  count1 = 5;
 80001a6:	2305      	movs	r3, #5
 80001a8:	617b      	str	r3, [r7, #20]
 80001aa:	e032      	b.n	8000212 <main+0xc6>
     		  	  }
     		  	  else if(status1 == 1)
 80001ac:	68bb      	ldr	r3, [r7, #8]
 80001ae:	2b01      	cmp	r3, #1
 80001b0:	d116      	bne.n	80001e0 <main+0x94>
     		  	  {

     		  		  led_off(1);
 80001b2:	2001      	movs	r0, #1
 80001b4:	f000 f99c 	bl	80004f0 <led_off>
     		  		  led_on(2);
 80001b8:	2002      	movs	r0, #2
 80001ba:	f000 f91f 	bl	80003fc <led_on>
     		  		  led_off(3);
 80001be:	2003      	movs	r0, #3
 80001c0:	f000 f996 	bl	80004f0 <led_off>
     		  		  led_off(7);
 80001c4:	2007      	movs	r0, #7
 80001c6:	f000 f993 	bl	80004f0 <led_off>
     		  		  led_on(8);
 80001ca:	2008      	movs	r0, #8
 80001cc:	f000 f916 	bl	80003fc <led_on>
     		  		  led_off(9);
 80001d0:	2009      	movs	r0, #9
 80001d2:	f000 f98d 	bl	80004f0 <led_off>
     		  		  status1 = 0;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60bb      	str	r3, [r7, #8]
     		  		  count1 = 2;
 80001da:	2302      	movs	r3, #2
 80001dc:	617b      	str	r3, [r7, #20]
 80001de:	e018      	b.n	8000212 <main+0xc6>
     		  	  }
     		  	  else if(status1 == 2)
 80001e0:	68bb      	ldr	r3, [r7, #8]
 80001e2:	2b02      	cmp	r3, #2
 80001e4:	d115      	bne.n	8000212 <main+0xc6>
     		  	  {

     		  		  led_off(1);
 80001e6:	2001      	movs	r0, #1
 80001e8:	f000 f982 	bl	80004f0 <led_off>
     		  		  led_off(2);
 80001ec:	2002      	movs	r0, #2
 80001ee:	f000 f97f 	bl	80004f0 <led_off>
     		  		  led_on(3);
 80001f2:	2003      	movs	r0, #3
 80001f4:	f000 f902 	bl	80003fc <led_on>
     		  		  led_off(7);
 80001f8:	2007      	movs	r0, #7
 80001fa:	f000 f979 	bl	80004f0 <led_off>
     		  		  led_off(8);
 80001fe:	2008      	movs	r0, #8
 8000200:	f000 f976 	bl	80004f0 <led_off>
     		  		  led_on(9);
 8000204:	2009      	movs	r0, #9
 8000206:	f000 f8f9 	bl	80003fc <led_on>
     		  		  status1 = 1;
 800020a:	2301      	movs	r3, #1
 800020c:	60bb      	str	r3, [r7, #8]
     		  		  count1 = 3;
 800020e:	2303      	movs	r3, #3
 8000210:	617b      	str	r3, [r7, #20]
     		  	  }
     	  	  }
     	  if(count2 == 0)
 8000212:	693b      	ldr	r3, [r7, #16]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14c      	bne.n	80002b2 <main+0x166>
     	  {
     		  	  if(status2 == 0)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d116      	bne.n	800024c <main+0x100>
     		  	  {
     		  		  led_on(4);
 800021e:	2004      	movs	r0, #4
 8000220:	f000 f8ec 	bl	80003fc <led_on>
     		  		  led_off(5);
 8000224:	2005      	movs	r0, #5
 8000226:	f000 f963 	bl	80004f0 <led_off>
     		  		  led_off(6);
 800022a:	2006      	movs	r0, #6
 800022c:	f000 f960 	bl	80004f0 <led_off>
     		  		  led_on(10);
 8000230:	200a      	movs	r0, #10
 8000232:	f000 f8e3 	bl	80003fc <led_on>
     		  		  led_off(11);
 8000236:	200b      	movs	r0, #11
 8000238:	f000 f95a 	bl	80004f0 <led_off>
     		  		  led_off(12);
 800023c:	200c      	movs	r0, #12
 800023e:	f000 f957 	bl	80004f0 <led_off>
     		  		  status2 = 2;
 8000242:	2302      	movs	r3, #2
 8000244:	607b      	str	r3, [r7, #4]
     		  		  count2 = 5;
 8000246:	2305      	movs	r3, #5
 8000248:	613b      	str	r3, [r7, #16]
 800024a:	e032      	b.n	80002b2 <main+0x166>
     		  	  }
     		  	  else if(status2 == 1)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2b01      	cmp	r3, #1
 8000250:	d116      	bne.n	8000280 <main+0x134>
     		  	  {
     		  		  led_off(4);
 8000252:	2004      	movs	r0, #4
 8000254:	f000 f94c 	bl	80004f0 <led_off>
     		  		  led_on(5);
 8000258:	2005      	movs	r0, #5
 800025a:	f000 f8cf 	bl	80003fc <led_on>
     		  		  led_off(6);
 800025e:	2006      	movs	r0, #6
 8000260:	f000 f946 	bl	80004f0 <led_off>
     		  		  led_off(10);
 8000264:	200a      	movs	r0, #10
 8000266:	f000 f943 	bl	80004f0 <led_off>
     		  		  led_on(11);
 800026a:	200b      	movs	r0, #11
 800026c:	f000 f8c6 	bl	80003fc <led_on>
     		  		  led_off(12);
 8000270:	200c      	movs	r0, #12
 8000272:	f000 f93d 	bl	80004f0 <led_off>
     		  		  status2 = 0;
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
     		  		  count2 = 2;
 800027a:	2302      	movs	r3, #2
 800027c:	613b      	str	r3, [r7, #16]
 800027e:	e018      	b.n	80002b2 <main+0x166>
     		  	  }
     		  	  else if(status2 == 2)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b02      	cmp	r3, #2
 8000284:	d115      	bne.n	80002b2 <main+0x166>
     		  	  {
     		  		  led_off(4);
 8000286:	2004      	movs	r0, #4
 8000288:	f000 f932 	bl	80004f0 <led_off>
     		  		  led_off(5);
 800028c:	2005      	movs	r0, #5
 800028e:	f000 f92f 	bl	80004f0 <led_off>
     		  		  led_on(6);
 8000292:	2006      	movs	r0, #6
 8000294:	f000 f8b2 	bl	80003fc <led_on>
     		  		  led_off(10);
 8000298:	200a      	movs	r0, #10
 800029a:	f000 f929 	bl	80004f0 <led_off>
     		  		  led_off(11);
 800029e:	200b      	movs	r0, #11
 80002a0:	f000 f926 	bl	80004f0 <led_off>
     		  		  led_on(12);
 80002a4:	200c      	movs	r0, #12
 80002a6:	f000 f8a9 	bl	80003fc <led_on>
     		  		  status2 = 1;
 80002aa:	2301      	movs	r3, #1
 80002ac:	607b      	str	r3, [r7, #4]
     		  		  count2 = 3;
 80002ae:	2303      	movs	r3, #3
 80002b0:	613b      	str	r3, [r7, #16]
     		  	  }
     	  }
     	  count1--;
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	3b01      	subs	r3, #1
 80002b6:	617b      	str	r3, [r7, #20]
     	  count2--;
 80002b8:	693b      	ldr	r3, [r7, #16]
 80002ba:	3b01      	subs	r3, #1
 80002bc:	613b      	str	r3, [r7, #16]
     	  if (counter >= 10) counter = 0;
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	2b09      	cmp	r3, #9
 80002c2:	dd01      	ble.n	80002c8 <main+0x17c>
 80002c4:	2300      	movs	r3, #0
 80002c6:	60fb      	str	r3, [r7, #12]
     	  display7SEG(counter++);
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	1c5a      	adds	r2, r3, #1
 80002cc:	60fa      	str	r2, [r7, #12]
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 f988 	bl	80005e4 <display7SEG>
     	  HAL_Delay(1000);
 80002d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d8:	f000 fc02 	bl	8000ae0 <HAL_Delay>
     	  if (count1 == 0)
 80002dc:	e749      	b.n	8000172 <main+0x26>

080002de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b090      	sub	sp, #64	; 0x40
 80002e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e4:	f107 0318 	add.w	r3, r7, #24
 80002e8:	2228      	movs	r2, #40	; 0x28
 80002ea:	2100      	movs	r1, #0
 80002ec:	4618      	mov	r0, r3
 80002ee:	f001 fa91 	bl	8001814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000300:	2302      	movs	r3, #2
 8000302:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	2301      	movs	r3, #1
 8000306:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000308:	2310      	movs	r3, #16
 800030a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800030c:	2300      	movs	r3, #0
 800030e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000310:	f107 0318 	add.w	r3, r7, #24
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fe7d 	bl	8001014 <HAL_RCC_OscConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000320:	f000 faf0 	bl	8000904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000324:	230f      	movs	r3, #15
 8000326:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000328:	2300      	movs	r3, #0
 800032a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2100      	movs	r1, #0
 800033c:	4618      	mov	r0, r3
 800033e:	f001 f8e9 	bl	8001514 <HAL_RCC_ClockConfig>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000348:	f000 fadc 	bl	8000904 <Error_Handler>
  }
}
 800034c:	bf00      	nop
 800034e:	3740      	adds	r7, #64	; 0x40
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	f107 0308 	add.w	r3, r7, #8
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000368:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <MX_GPIO_Init+0x9c>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a20      	ldr	r2, [pc, #128]	; (80003f0 <MX_GPIO_Init+0x9c>)
 800036e:	f043 0304 	orr.w	r3, r3, #4
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <MX_GPIO_Init+0x9c>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0304 	and.w	r3, r3, #4
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000380:	4b1b      	ldr	r3, [pc, #108]	; (80003f0 <MX_GPIO_Init+0x9c>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a1a      	ldr	r2, [pc, #104]	; (80003f0 <MX_GPIO_Init+0x9c>)
 8000386:	f043 0308 	orr.w	r3, r3, #8
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <MX_GPIO_Init+0x9c>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0308 	and.w	r3, r3, #8
 8000394:	603b      	str	r3, [r7, #0]
 8000396:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8000398:	2200      	movs	r2, #0
 800039a:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 800039e:	4815      	ldr	r0, [pc, #84]	; (80003f4 <MX_GPIO_Init+0xa0>)
 80003a0:	f000 fe20 	bl	8000fe4 <HAL_GPIO_WritePin>
                          |LLED_YELLOW_2_Pin|LED_GREEN_2_Pin|LED_RED_3_Pin|LED_YELLOW_3_Pin
                          |LED_GREEN_3_Pin|LED_RED_4_Pin|LED_YELLOW_4_Pin|LED_GREEN_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG7_a_Pin|SEG7_b_Pin|SEG7_c_Pin|SEG7_d_Pin
 80003a4:	2200      	movs	r2, #0
 80003a6:	217f      	movs	r1, #127	; 0x7f
 80003a8:	4813      	ldr	r0, [pc, #76]	; (80003f8 <MX_GPIO_Init+0xa4>)
 80003aa:	f000 fe1b 	bl	8000fe4 <HAL_GPIO_WritePin>
                          |SEG7_e_Pin|SEG7_f_Pin|SEG7_g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LLED_YELLOW_2_Pin LED_GREEN_2_Pin LED_RED_3_Pin LED_YELLOW_3_Pin
                           LED_GREEN_3_Pin LED_RED_4_Pin LED_YELLOW_4_Pin LED_GREEN_4_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 80003ae:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 80003b2:	60bb      	str	r3, [r7, #8]
                          |LLED_YELLOW_2_Pin|LED_GREEN_2_Pin|LED_RED_3_Pin|LED_YELLOW_3_Pin
                          |LED_GREEN_3_Pin|LED_RED_4_Pin|LED_YELLOW_4_Pin|LED_GREEN_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b4:	2301      	movs	r3, #1
 80003b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b8:	2300      	movs	r3, #0
 80003ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003bc:	2302      	movs	r3, #2
 80003be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c0:	f107 0308 	add.w	r3, r7, #8
 80003c4:	4619      	mov	r1, r3
 80003c6:	480b      	ldr	r0, [pc, #44]	; (80003f4 <MX_GPIO_Init+0xa0>)
 80003c8:	f000 fc92 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG7_a_Pin SEG7_b_Pin SEG7_c_Pin SEG7_d_Pin
                           SEG7_e_Pin SEG7_f_Pin SEG7_g_Pin */
  GPIO_InitStruct.Pin = SEG7_a_Pin|SEG7_b_Pin|SEG7_c_Pin|SEG7_d_Pin
 80003cc:	237f      	movs	r3, #127	; 0x7f
 80003ce:	60bb      	str	r3, [r7, #8]
                          |SEG7_e_Pin|SEG7_f_Pin|SEG7_g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d0:	2301      	movs	r3, #1
 80003d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d4:	2300      	movs	r3, #0
 80003d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d8:	2302      	movs	r3, #2
 80003da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003dc:	f107 0308 	add.w	r3, r7, #8
 80003e0:	4619      	mov	r1, r3
 80003e2:	4805      	ldr	r0, [pc, #20]	; (80003f8 <MX_GPIO_Init+0xa4>)
 80003e4:	f000 fc84 	bl	8000cf0 <HAL_GPIO_Init>

}
 80003e8:	bf00      	nop
 80003ea:	3718      	adds	r7, #24
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40010800 	.word	0x40010800
 80003f8:	40010c00 	.word	0x40010c00

080003fc <led_on>:

/* USER CODE BEGIN 4 */
void led_on(int pin)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	if (pin == 1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	2b01      	cmp	r3, #1
 8000408:	d105      	bne.n	8000416 <led_on+0x1a>
 800040a:	2200      	movs	r2, #0
 800040c:	2102      	movs	r1, #2
 800040e:	4837      	ldr	r0, [pc, #220]	; (80004ec <led_on+0xf0>)
 8000410:	f000 fde8 	bl	8000fe4 <HAL_GPIO_WritePin>
    else if (pin == 8) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
    else if (pin == 9) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
    else if (pin == 10) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
    else if (pin == 11) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
    else if (pin == 12) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
}
 8000414:	e066      	b.n	80004e4 <led_on+0xe8>
    else if (pin == 2) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2b02      	cmp	r3, #2
 800041a:	d105      	bne.n	8000428 <led_on+0x2c>
 800041c:	2200      	movs	r2, #0
 800041e:	2104      	movs	r1, #4
 8000420:	4832      	ldr	r0, [pc, #200]	; (80004ec <led_on+0xf0>)
 8000422:	f000 fddf 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 8000426:	e05d      	b.n	80004e4 <led_on+0xe8>
    else if (pin == 3) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b03      	cmp	r3, #3
 800042c:	d105      	bne.n	800043a <led_on+0x3e>
 800042e:	2200      	movs	r2, #0
 8000430:	2108      	movs	r1, #8
 8000432:	482e      	ldr	r0, [pc, #184]	; (80004ec <led_on+0xf0>)
 8000434:	f000 fdd6 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 8000438:	e054      	b.n	80004e4 <led_on+0xe8>
    else if (pin == 4) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2b04      	cmp	r3, #4
 800043e:	d105      	bne.n	800044c <led_on+0x50>
 8000440:	2200      	movs	r2, #0
 8000442:	2110      	movs	r1, #16
 8000444:	4829      	ldr	r0, [pc, #164]	; (80004ec <led_on+0xf0>)
 8000446:	f000 fdcd 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 800044a:	e04b      	b.n	80004e4 <led_on+0xe8>
    else if (pin == 5) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	2b05      	cmp	r3, #5
 8000450:	d105      	bne.n	800045e <led_on+0x62>
 8000452:	2200      	movs	r2, #0
 8000454:	2120      	movs	r1, #32
 8000456:	4825      	ldr	r0, [pc, #148]	; (80004ec <led_on+0xf0>)
 8000458:	f000 fdc4 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 800045c:	e042      	b.n	80004e4 <led_on+0xe8>
    else if (pin == 6) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2b06      	cmp	r3, #6
 8000462:	d105      	bne.n	8000470 <led_on+0x74>
 8000464:	2200      	movs	r2, #0
 8000466:	2140      	movs	r1, #64	; 0x40
 8000468:	4820      	ldr	r0, [pc, #128]	; (80004ec <led_on+0xf0>)
 800046a:	f000 fdbb 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 800046e:	e039      	b.n	80004e4 <led_on+0xe8>
    else if (pin == 7) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2b07      	cmp	r3, #7
 8000474:	d105      	bne.n	8000482 <led_on+0x86>
 8000476:	2200      	movs	r2, #0
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	481c      	ldr	r0, [pc, #112]	; (80004ec <led_on+0xf0>)
 800047c:	f000 fdb2 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 8000480:	e030      	b.n	80004e4 <led_on+0xe8>
    else if (pin == 8) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	2b08      	cmp	r3, #8
 8000486:	d106      	bne.n	8000496 <led_on+0x9a>
 8000488:	2200      	movs	r2, #0
 800048a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800048e:	4817      	ldr	r0, [pc, #92]	; (80004ec <led_on+0xf0>)
 8000490:	f000 fda8 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 8000494:	e026      	b.n	80004e4 <led_on+0xe8>
    else if (pin == 9) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	2b09      	cmp	r3, #9
 800049a:	d106      	bne.n	80004aa <led_on+0xae>
 800049c:	2200      	movs	r2, #0
 800049e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a2:	4812      	ldr	r0, [pc, #72]	; (80004ec <led_on+0xf0>)
 80004a4:	f000 fd9e 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 80004a8:	e01c      	b.n	80004e4 <led_on+0xe8>
    else if (pin == 10) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	2b0a      	cmp	r3, #10
 80004ae:	d106      	bne.n	80004be <led_on+0xc2>
 80004b0:	2200      	movs	r2, #0
 80004b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b6:	480d      	ldr	r0, [pc, #52]	; (80004ec <led_on+0xf0>)
 80004b8:	f000 fd94 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 80004bc:	e012      	b.n	80004e4 <led_on+0xe8>
    else if (pin == 11) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2b0b      	cmp	r3, #11
 80004c2:	d106      	bne.n	80004d2 <led_on+0xd6>
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ca:	4808      	ldr	r0, [pc, #32]	; (80004ec <led_on+0xf0>)
 80004cc:	f000 fd8a 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 80004d0:	e008      	b.n	80004e4 <led_on+0xe8>
    else if (pin == 12) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2b0c      	cmp	r3, #12
 80004d6:	d105      	bne.n	80004e4 <led_on+0xe8>
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004de:	4803      	ldr	r0, [pc, #12]	; (80004ec <led_on+0xf0>)
 80004e0:	f000 fd80 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40010800 	.word	0x40010800

080004f0 <led_off>:
void led_off(int pin)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 	if (pin == 1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d105      	bne.n	800050a <led_off+0x1a>
 80004fe:	2201      	movs	r2, #1
 8000500:	2102      	movs	r1, #2
 8000502:	4837      	ldr	r0, [pc, #220]	; (80005e0 <led_off+0xf0>)
 8000504:	f000 fd6e 	bl	8000fe4 <HAL_GPIO_WritePin>
 	else if (pin == 8) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 	else if (pin == 9) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 	else if (pin == 10) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 	else if (pin == 11) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 	else if (pin == 12) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
}
 8000508:	e066      	b.n	80005d8 <led_off+0xe8>
 	else if (pin == 2) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2b02      	cmp	r3, #2
 800050e:	d105      	bne.n	800051c <led_off+0x2c>
 8000510:	2201      	movs	r2, #1
 8000512:	2104      	movs	r1, #4
 8000514:	4832      	ldr	r0, [pc, #200]	; (80005e0 <led_off+0xf0>)
 8000516:	f000 fd65 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 800051a:	e05d      	b.n	80005d8 <led_off+0xe8>
 	else if (pin == 3) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2b03      	cmp	r3, #3
 8000520:	d105      	bne.n	800052e <led_off+0x3e>
 8000522:	2201      	movs	r2, #1
 8000524:	2108      	movs	r1, #8
 8000526:	482e      	ldr	r0, [pc, #184]	; (80005e0 <led_off+0xf0>)
 8000528:	f000 fd5c 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 800052c:	e054      	b.n	80005d8 <led_off+0xe8>
 	else if (pin == 4) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b04      	cmp	r3, #4
 8000532:	d105      	bne.n	8000540 <led_off+0x50>
 8000534:	2201      	movs	r2, #1
 8000536:	2110      	movs	r1, #16
 8000538:	4829      	ldr	r0, [pc, #164]	; (80005e0 <led_off+0xf0>)
 800053a:	f000 fd53 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 800053e:	e04b      	b.n	80005d8 <led_off+0xe8>
 	else if (pin == 5) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b05      	cmp	r3, #5
 8000544:	d105      	bne.n	8000552 <led_off+0x62>
 8000546:	2201      	movs	r2, #1
 8000548:	2120      	movs	r1, #32
 800054a:	4825      	ldr	r0, [pc, #148]	; (80005e0 <led_off+0xf0>)
 800054c:	f000 fd4a 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 8000550:	e042      	b.n	80005d8 <led_off+0xe8>
 	else if (pin == 6) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b06      	cmp	r3, #6
 8000556:	d105      	bne.n	8000564 <led_off+0x74>
 8000558:	2201      	movs	r2, #1
 800055a:	2140      	movs	r1, #64	; 0x40
 800055c:	4820      	ldr	r0, [pc, #128]	; (80005e0 <led_off+0xf0>)
 800055e:	f000 fd41 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 8000562:	e039      	b.n	80005d8 <led_off+0xe8>
 	else if (pin == 7) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b07      	cmp	r3, #7
 8000568:	d105      	bne.n	8000576 <led_off+0x86>
 800056a:	2201      	movs	r2, #1
 800056c:	2180      	movs	r1, #128	; 0x80
 800056e:	481c      	ldr	r0, [pc, #112]	; (80005e0 <led_off+0xf0>)
 8000570:	f000 fd38 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 8000574:	e030      	b.n	80005d8 <led_off+0xe8>
 	else if (pin == 8) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b08      	cmp	r3, #8
 800057a:	d106      	bne.n	800058a <led_off+0x9a>
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000582:	4817      	ldr	r0, [pc, #92]	; (80005e0 <led_off+0xf0>)
 8000584:	f000 fd2e 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 8000588:	e026      	b.n	80005d8 <led_off+0xe8>
 	else if (pin == 9) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b09      	cmp	r3, #9
 800058e:	d106      	bne.n	800059e <led_off+0xae>
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000596:	4812      	ldr	r0, [pc, #72]	; (80005e0 <led_off+0xf0>)
 8000598:	f000 fd24 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 800059c:	e01c      	b.n	80005d8 <led_off+0xe8>
 	else if (pin == 10) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b0a      	cmp	r3, #10
 80005a2:	d106      	bne.n	80005b2 <led_off+0xc2>
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005aa:	480d      	ldr	r0, [pc, #52]	; (80005e0 <led_off+0xf0>)
 80005ac:	f000 fd1a 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 80005b0:	e012      	b.n	80005d8 <led_off+0xe8>
 	else if (pin == 11) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b0b      	cmp	r3, #11
 80005b6:	d106      	bne.n	80005c6 <led_off+0xd6>
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005be:	4808      	ldr	r0, [pc, #32]	; (80005e0 <led_off+0xf0>)
 80005c0:	f000 fd10 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 80005c4:	e008      	b.n	80005d8 <led_off+0xe8>
 	else if (pin == 12) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b0c      	cmp	r3, #12
 80005ca:	d105      	bne.n	80005d8 <led_off+0xe8>
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d2:	4803      	ldr	r0, [pc, #12]	; (80005e0 <led_off+0xf0>)
 80005d4:	f000 fd06 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40010800 	.word	0x40010800

080005e4 <display7SEG>:
void display7SEG(int num)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
   	if (num == 0)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d123      	bne.n	800063a <display7SEG+0x56>
    {
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2101      	movs	r1, #1
 80005f6:	48c2      	ldr	r0, [pc, #776]	; (8000900 <display7SEG+0x31c>)
 80005f8:	f000 fcf4 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2102      	movs	r1, #2
 8000600:	48bf      	ldr	r0, [pc, #764]	; (8000900 <display7SEG+0x31c>)
 8000602:	f000 fcef 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2104      	movs	r1, #4
 800060a:	48bd      	ldr	r0, [pc, #756]	; (8000900 <display7SEG+0x31c>)
 800060c:	f000 fcea 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
 8000610:	2200      	movs	r2, #0
 8000612:	2108      	movs	r1, #8
 8000614:	48ba      	ldr	r0, [pc, #744]	; (8000900 <display7SEG+0x31c>)
 8000616:	f000 fce5 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2110      	movs	r1, #16
 800061e:	48b8      	ldr	r0, [pc, #736]	; (8000900 <display7SEG+0x31c>)
 8000620:	f000 fce0 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	2120      	movs	r1, #32
 8000628:	48b5      	ldr	r0, [pc, #724]	; (8000900 <display7SEG+0x31c>)
 800062a:	f000 fcdb 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 1);
 800062e:	2201      	movs	r2, #1
 8000630:	2140      	movs	r1, #64	; 0x40
 8000632:	48b3      	ldr	r0, [pc, #716]	; (8000900 <display7SEG+0x31c>)
 8000634:	f000 fcd6 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 1);
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 0);
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
   	}
   	   }
 8000638:	e15d      	b.n	80008f6 <display7SEG+0x312>
   	else if (num == 1)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d123      	bne.n	8000688 <display7SEG+0xa4>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 1);
 8000640:	2201      	movs	r2, #1
 8000642:	2101      	movs	r1, #1
 8000644:	48ae      	ldr	r0, [pc, #696]	; (8000900 <display7SEG+0x31c>)
 8000646:	f000 fccd 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2102      	movs	r1, #2
 800064e:	48ac      	ldr	r0, [pc, #688]	; (8000900 <display7SEG+0x31c>)
 8000650:	f000 fcc8 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2104      	movs	r1, #4
 8000658:	48a9      	ldr	r0, [pc, #676]	; (8000900 <display7SEG+0x31c>)
 800065a:	f000 fcc3 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 1);
 800065e:	2201      	movs	r2, #1
 8000660:	2108      	movs	r1, #8
 8000662:	48a7      	ldr	r0, [pc, #668]	; (8000900 <display7SEG+0x31c>)
 8000664:	f000 fcbe 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 1);
 8000668:	2201      	movs	r2, #1
 800066a:	2110      	movs	r1, #16
 800066c:	48a4      	ldr	r0, [pc, #656]	; (8000900 <display7SEG+0x31c>)
 800066e:	f000 fcb9 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 1);
 8000672:	2201      	movs	r2, #1
 8000674:	2120      	movs	r1, #32
 8000676:	48a2      	ldr	r0, [pc, #648]	; (8000900 <display7SEG+0x31c>)
 8000678:	f000 fcb4 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 1);
 800067c:	2201      	movs	r2, #1
 800067e:	2140      	movs	r1, #64	; 0x40
 8000680:	489f      	ldr	r0, [pc, #636]	; (8000900 <display7SEG+0x31c>)
 8000682:	f000 fcaf 	bl	8000fe4 <HAL_GPIO_WritePin>
   	   }
 8000686:	e136      	b.n	80008f6 <display7SEG+0x312>
   	else if (num == 2)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b02      	cmp	r3, #2
 800068c:	d123      	bne.n	80006d6 <display7SEG+0xf2>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2101      	movs	r1, #1
 8000692:	489b      	ldr	r0, [pc, #620]	; (8000900 <display7SEG+0x31c>)
 8000694:	f000 fca6 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	2102      	movs	r1, #2
 800069c:	4898      	ldr	r0, [pc, #608]	; (8000900 <display7SEG+0x31c>)
 800069e:	f000 fca1 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 1);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2104      	movs	r1, #4
 80006a6:	4896      	ldr	r0, [pc, #600]	; (8000900 <display7SEG+0x31c>)
 80006a8:	f000 fc9c 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2108      	movs	r1, #8
 80006b0:	4893      	ldr	r0, [pc, #588]	; (8000900 <display7SEG+0x31c>)
 80006b2:	f000 fc97 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2110      	movs	r1, #16
 80006ba:	4891      	ldr	r0, [pc, #580]	; (8000900 <display7SEG+0x31c>)
 80006bc:	f000 fc92 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 1);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2120      	movs	r1, #32
 80006c4:	488e      	ldr	r0, [pc, #568]	; (8000900 <display7SEG+0x31c>)
 80006c6:	f000 fc8d 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2140      	movs	r1, #64	; 0x40
 80006ce:	488c      	ldr	r0, [pc, #560]	; (8000900 <display7SEG+0x31c>)
 80006d0:	f000 fc88 	bl	8000fe4 <HAL_GPIO_WritePin>
   	   }
 80006d4:	e10f      	b.n	80008f6 <display7SEG+0x312>
   	else if (num == 3)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d123      	bne.n	8000724 <display7SEG+0x140>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2101      	movs	r1, #1
 80006e0:	4887      	ldr	r0, [pc, #540]	; (8000900 <display7SEG+0x31c>)
 80006e2:	f000 fc7f 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2102      	movs	r1, #2
 80006ea:	4885      	ldr	r0, [pc, #532]	; (8000900 <display7SEG+0x31c>)
 80006ec:	f000 fc7a 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2104      	movs	r1, #4
 80006f4:	4882      	ldr	r0, [pc, #520]	; (8000900 <display7SEG+0x31c>)
 80006f6:	f000 fc75 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2108      	movs	r1, #8
 80006fe:	4880      	ldr	r0, [pc, #512]	; (8000900 <display7SEG+0x31c>)
 8000700:	f000 fc70 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 1);
 8000704:	2201      	movs	r2, #1
 8000706:	2110      	movs	r1, #16
 8000708:	487d      	ldr	r0, [pc, #500]	; (8000900 <display7SEG+0x31c>)
 800070a:	f000 fc6b 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 1);
 800070e:	2201      	movs	r2, #1
 8000710:	2120      	movs	r1, #32
 8000712:	487b      	ldr	r0, [pc, #492]	; (8000900 <display7SEG+0x31c>)
 8000714:	f000 fc66 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	4878      	ldr	r0, [pc, #480]	; (8000900 <display7SEG+0x31c>)
 800071e:	f000 fc61 	bl	8000fe4 <HAL_GPIO_WritePin>
   	   }
 8000722:	e0e8      	b.n	80008f6 <display7SEG+0x312>
   	else if (num == 4)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b04      	cmp	r3, #4
 8000728:	d123      	bne.n	8000772 <display7SEG+0x18e>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 1);
 800072a:	2201      	movs	r2, #1
 800072c:	2101      	movs	r1, #1
 800072e:	4874      	ldr	r0, [pc, #464]	; (8000900 <display7SEG+0x31c>)
 8000730:	f000 fc58 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2102      	movs	r1, #2
 8000738:	4871      	ldr	r0, [pc, #452]	; (8000900 <display7SEG+0x31c>)
 800073a:	f000 fc53 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2104      	movs	r1, #4
 8000742:	486f      	ldr	r0, [pc, #444]	; (8000900 <display7SEG+0x31c>)
 8000744:	f000 fc4e 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 1);
 8000748:	2201      	movs	r2, #1
 800074a:	2108      	movs	r1, #8
 800074c:	486c      	ldr	r0, [pc, #432]	; (8000900 <display7SEG+0x31c>)
 800074e:	f000 fc49 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 1);
 8000752:	2201      	movs	r2, #1
 8000754:	2110      	movs	r1, #16
 8000756:	486a      	ldr	r0, [pc, #424]	; (8000900 <display7SEG+0x31c>)
 8000758:	f000 fc44 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2120      	movs	r1, #32
 8000760:	4867      	ldr	r0, [pc, #412]	; (8000900 <display7SEG+0x31c>)
 8000762:	f000 fc3f 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2140      	movs	r1, #64	; 0x40
 800076a:	4865      	ldr	r0, [pc, #404]	; (8000900 <display7SEG+0x31c>)
 800076c:	f000 fc3a 	bl	8000fe4 <HAL_GPIO_WritePin>
   	   }
 8000770:	e0c1      	b.n	80008f6 <display7SEG+0x312>
   	else if (num == 5)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b05      	cmp	r3, #5
 8000776:	d123      	bne.n	80007c0 <display7SEG+0x1dc>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2101      	movs	r1, #1
 800077c:	4860      	ldr	r0, [pc, #384]	; (8000900 <display7SEG+0x31c>)
 800077e:	f000 fc31 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 1);
 8000782:	2201      	movs	r2, #1
 8000784:	2102      	movs	r1, #2
 8000786:	485e      	ldr	r0, [pc, #376]	; (8000900 <display7SEG+0x31c>)
 8000788:	f000 fc2c 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2104      	movs	r1, #4
 8000790:	485b      	ldr	r0, [pc, #364]	; (8000900 <display7SEG+0x31c>)
 8000792:	f000 fc27 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2108      	movs	r1, #8
 800079a:	4859      	ldr	r0, [pc, #356]	; (8000900 <display7SEG+0x31c>)
 800079c:	f000 fc22 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 1);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2110      	movs	r1, #16
 80007a4:	4856      	ldr	r0, [pc, #344]	; (8000900 <display7SEG+0x31c>)
 80007a6:	f000 fc1d 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2120      	movs	r1, #32
 80007ae:	4854      	ldr	r0, [pc, #336]	; (8000900 <display7SEG+0x31c>)
 80007b0:	f000 fc18 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2140      	movs	r1, #64	; 0x40
 80007b8:	4851      	ldr	r0, [pc, #324]	; (8000900 <display7SEG+0x31c>)
 80007ba:	f000 fc13 	bl	8000fe4 <HAL_GPIO_WritePin>
   	   }
 80007be:	e09a      	b.n	80008f6 <display7SEG+0x312>
   	else if (num == 6)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d123      	bne.n	800080e <display7SEG+0x22a>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2101      	movs	r1, #1
 80007ca:	484d      	ldr	r0, [pc, #308]	; (8000900 <display7SEG+0x31c>)
 80007cc:	f000 fc0a 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 1);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2102      	movs	r1, #2
 80007d4:	484a      	ldr	r0, [pc, #296]	; (8000900 <display7SEG+0x31c>)
 80007d6:	f000 fc05 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2104      	movs	r1, #4
 80007de:	4848      	ldr	r0, [pc, #288]	; (8000900 <display7SEG+0x31c>)
 80007e0:	f000 fc00 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2108      	movs	r1, #8
 80007e8:	4845      	ldr	r0, [pc, #276]	; (8000900 <display7SEG+0x31c>)
 80007ea:	f000 fbfb 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2110      	movs	r1, #16
 80007f2:	4843      	ldr	r0, [pc, #268]	; (8000900 <display7SEG+0x31c>)
 80007f4:	f000 fbf6 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 0);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2120      	movs	r1, #32
 80007fc:	4840      	ldr	r0, [pc, #256]	; (8000900 <display7SEG+0x31c>)
 80007fe:	f000 fbf1 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2140      	movs	r1, #64	; 0x40
 8000806:	483e      	ldr	r0, [pc, #248]	; (8000900 <display7SEG+0x31c>)
 8000808:	f000 fbec 	bl	8000fe4 <HAL_GPIO_WritePin>
   	   }
 800080c:	e073      	b.n	80008f6 <display7SEG+0x312>
   	else if (num == 7)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b07      	cmp	r3, #7
 8000812:	d123      	bne.n	800085c <display7SEG+0x278>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2101      	movs	r1, #1
 8000818:	4839      	ldr	r0, [pc, #228]	; (8000900 <display7SEG+0x31c>)
 800081a:	f000 fbe3 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2102      	movs	r1, #2
 8000822:	4837      	ldr	r0, [pc, #220]	; (8000900 <display7SEG+0x31c>)
 8000824:	f000 fbde 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2104      	movs	r1, #4
 800082c:	4834      	ldr	r0, [pc, #208]	; (8000900 <display7SEG+0x31c>)
 800082e:	f000 fbd9 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 1);
 8000832:	2201      	movs	r2, #1
 8000834:	2108      	movs	r1, #8
 8000836:	4832      	ldr	r0, [pc, #200]	; (8000900 <display7SEG+0x31c>)
 8000838:	f000 fbd4 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 1);
 800083c:	2201      	movs	r2, #1
 800083e:	2110      	movs	r1, #16
 8000840:	482f      	ldr	r0, [pc, #188]	; (8000900 <display7SEG+0x31c>)
 8000842:	f000 fbcf 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 1);
 8000846:	2201      	movs	r2, #1
 8000848:	2120      	movs	r1, #32
 800084a:	482d      	ldr	r0, [pc, #180]	; (8000900 <display7SEG+0x31c>)
 800084c:	f000 fbca 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 1);
 8000850:	2201      	movs	r2, #1
 8000852:	2140      	movs	r1, #64	; 0x40
 8000854:	482a      	ldr	r0, [pc, #168]	; (8000900 <display7SEG+0x31c>)
 8000856:	f000 fbc5 	bl	8000fe4 <HAL_GPIO_WritePin>
   	   }
 800085a:	e04c      	b.n	80008f6 <display7SEG+0x312>
   	else if (num == 8)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b08      	cmp	r3, #8
 8000860:	d123      	bne.n	80008aa <display7SEG+0x2c6>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2101      	movs	r1, #1
 8000866:	4826      	ldr	r0, [pc, #152]	; (8000900 <display7SEG+0x31c>)
 8000868:	f000 fbbc 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	2102      	movs	r1, #2
 8000870:	4823      	ldr	r0, [pc, #140]	; (8000900 <display7SEG+0x31c>)
 8000872:	f000 fbb7 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2104      	movs	r1, #4
 800087a:	4821      	ldr	r0, [pc, #132]	; (8000900 <display7SEG+0x31c>)
 800087c:	f000 fbb2 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2108      	movs	r1, #8
 8000884:	481e      	ldr	r0, [pc, #120]	; (8000900 <display7SEG+0x31c>)
 8000886:	f000 fbad 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2110      	movs	r1, #16
 800088e:	481c      	ldr	r0, [pc, #112]	; (8000900 <display7SEG+0x31c>)
 8000890:	f000 fba8 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2120      	movs	r1, #32
 8000898:	4819      	ldr	r0, [pc, #100]	; (8000900 <display7SEG+0x31c>)
 800089a:	f000 fba3 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2140      	movs	r1, #64	; 0x40
 80008a2:	4817      	ldr	r0, [pc, #92]	; (8000900 <display7SEG+0x31c>)
 80008a4:	f000 fb9e 	bl	8000fe4 <HAL_GPIO_WritePin>
   	   }
 80008a8:	e025      	b.n	80008f6 <display7SEG+0x312>
   	else if (num == 9)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b09      	cmp	r3, #9
 80008ae:	d122      	bne.n	80008f6 <display7SEG+0x312>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2101      	movs	r1, #1
 80008b4:	4812      	ldr	r0, [pc, #72]	; (8000900 <display7SEG+0x31c>)
 80008b6:	f000 fb95 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2102      	movs	r1, #2
 80008be:	4810      	ldr	r0, [pc, #64]	; (8000900 <display7SEG+0x31c>)
 80008c0:	f000 fb90 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2104      	movs	r1, #4
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <display7SEG+0x31c>)
 80008ca:	f000 fb8b 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2108      	movs	r1, #8
 80008d2:	480b      	ldr	r0, [pc, #44]	; (8000900 <display7SEG+0x31c>)
 80008d4:	f000 fb86 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 1);
 80008d8:	2201      	movs	r2, #1
 80008da:	2110      	movs	r1, #16
 80008dc:	4808      	ldr	r0, [pc, #32]	; (8000900 <display7SEG+0x31c>)
 80008de:	f000 fb81 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2120      	movs	r1, #32
 80008e6:	4806      	ldr	r0, [pc, #24]	; (8000900 <display7SEG+0x31c>)
 80008e8:	f000 fb7c 	bl	8000fe4 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2140      	movs	r1, #64	; 0x40
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <display7SEG+0x31c>)
 80008f2:	f000 fb77 	bl	8000fe4 <HAL_GPIO_WritePin>
   	   }
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40010c00 	.word	0x40010c00

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <HAL_MspInit+0x5c>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	4a14      	ldr	r2, [pc, #80]	; (800096c <HAL_MspInit+0x5c>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6193      	str	r3, [r2, #24]
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_MspInit+0x5c>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_MspInit+0x5c>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <HAL_MspInit+0x5c>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	61d3      	str	r3, [r2, #28]
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_MspInit+0x5c>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_MspInit+0x60>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	4a04      	ldr	r2, [pc, #16]	; (8000970 <HAL_MspInit+0x60>)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	40021000 	.word	0x40021000
 8000970:	40010000 	.word	0x40010000

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <NMI_Handler+0x4>

0800097a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <MemManage_Handler+0x4>

08000986 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <UsageFault_Handler+0x4>

08000992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr

0800099e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr

080009b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ba:	f000 f875 	bl	8000aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
	...

080009d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009d0:	f7ff fff7 	bl	80009c2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d4:	480b      	ldr	r0, [pc, #44]	; (8000a04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009d6:	490c      	ldr	r1, [pc, #48]	; (8000a08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009d8:	4a0c      	ldr	r2, [pc, #48]	; (8000a0c <LoopFillZerobss+0x16>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a09      	ldr	r2, [pc, #36]	; (8000a10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009ec:	4c09      	ldr	r4, [pc, #36]	; (8000a14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009fa:	f000 fee7 	bl	80017cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fe:	f7ff fba5 	bl	800014c <main>
  bx lr
 8000a02:	4770      	bx	lr
  ldr r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a0c:	08001868 	.word	0x08001868
  ldr r2, =_sbss
 8000a10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a14:	2000002c 	.word	0x2000002c

08000a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC1_2_IRQHandler>
	...

08000a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_Init+0x28>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_Init+0x28>)
 8000a26:	f043 0310 	orr.w	r3, r3, #16
 8000a2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f000 f92b 	bl	8000c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a32:	200f      	movs	r0, #15
 8000a34:	f000 f808 	bl	8000a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a38:	f7ff ff6a 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40022000 	.word	0x40022000

08000a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <HAL_InitTick+0x54>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_InitTick+0x58>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 f935 	bl	8000cd6 <HAL_SYSTICK_Config>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e00e      	b.n	8000a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b0f      	cmp	r3, #15
 8000a7a:	d80a      	bhi.n	8000a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	f000 f90b 	bl	8000c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a88:	4a06      	ldr	r2, [pc, #24]	; (8000aa4 <HAL_InitTick+0x5c>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e000      	b.n	8000a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	20000004 	.word	0x20000004

08000aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_IncTick+0x1c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_IncTick+0x20>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4a03      	ldr	r2, [pc, #12]	; (8000ac8 <HAL_IncTick+0x20>)
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000028 	.word	0x20000028

08000acc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad0:	4b02      	ldr	r3, [pc, #8]	; (8000adc <HAL_GetTick+0x10>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	20000028 	.word	0x20000028

08000ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae8:	f7ff fff0 	bl	8000acc <HAL_GetTick>
 8000aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af8:	d005      	beq.n	8000b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_Delay+0x44>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4413      	add	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b06:	bf00      	nop
 8000b08:	f7ff ffe0 	bl	8000acc <HAL_GetTick>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d8f7      	bhi.n	8000b08 <HAL_Delay+0x28>
  {
  }
}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000008 	.word	0x20000008

08000b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b44:	4013      	ands	r3, r2
 8000b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5a:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	60d3      	str	r3, [r2, #12]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <__NVIC_GetPriorityGrouping+0x18>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	f003 0307 	and.w	r3, r3, #7
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	; (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	bf28      	it	cs
 8000bfe:	2304      	movcs	r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3304      	adds	r3, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d902      	bls.n	8000c10 <NVIC_EncodePriority+0x30>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	e000      	b.n	8000c12 <NVIC_EncodePriority+0x32>
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	4313      	orrs	r3, r2
         );
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	; 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c54:	d301      	bcc.n	8000c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00f      	b.n	8000c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <SysTick_Config+0x40>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c62:	210f      	movs	r1, #15
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f7ff ff90 	bl	8000b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <SysTick_Config+0x40>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <SysTick_Config+0x40>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	e000e010 	.word	0xe000e010

08000c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ff49 	bl	8000b28 <__NVIC_SetPriorityGrouping>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb0:	f7ff ff5e 	bl	8000b70 <__NVIC_GetPriorityGrouping>
 8000cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	68b9      	ldr	r1, [r7, #8]
 8000cba:	6978      	ldr	r0, [r7, #20]
 8000cbc:	f7ff ff90 	bl	8000be0 <NVIC_EncodePriority>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff5f 	bl	8000b8c <__NVIC_SetPriority>
}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ffb0 	bl	8000c44 <SysTick_Config>
 8000ce4:	4603      	mov	r3, r0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b08b      	sub	sp, #44	; 0x2c
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d02:	e148      	b.n	8000f96 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d04:	2201      	movs	r2, #1
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	69fa      	ldr	r2, [r7, #28]
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	f040 8137 	bne.w	8000f90 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	4aa3      	ldr	r2, [pc, #652]	; (8000fb4 <HAL_GPIO_Init+0x2c4>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d05e      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d2c:	4aa1      	ldr	r2, [pc, #644]	; (8000fb4 <HAL_GPIO_Init+0x2c4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d875      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d32:	4aa1      	ldr	r2, [pc, #644]	; (8000fb8 <HAL_GPIO_Init+0x2c8>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d058      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d38:	4a9f      	ldr	r2, [pc, #636]	; (8000fb8 <HAL_GPIO_Init+0x2c8>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d86f      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d3e:	4a9f      	ldr	r2, [pc, #636]	; (8000fbc <HAL_GPIO_Init+0x2cc>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d052      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d44:	4a9d      	ldr	r2, [pc, #628]	; (8000fbc <HAL_GPIO_Init+0x2cc>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d869      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d4a:	4a9d      	ldr	r2, [pc, #628]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d04c      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d50:	4a9b      	ldr	r2, [pc, #620]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d863      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d56:	4a9b      	ldr	r2, [pc, #620]	; (8000fc4 <HAL_GPIO_Init+0x2d4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d046      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d5c:	4a99      	ldr	r2, [pc, #612]	; (8000fc4 <HAL_GPIO_Init+0x2d4>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d85d      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d62:	2b12      	cmp	r3, #18
 8000d64:	d82a      	bhi.n	8000dbc <HAL_GPIO_Init+0xcc>
 8000d66:	2b12      	cmp	r3, #18
 8000d68:	d859      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d6a:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <HAL_GPIO_Init+0x80>)
 8000d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d70:	08000deb 	.word	0x08000deb
 8000d74:	08000dc5 	.word	0x08000dc5
 8000d78:	08000dd7 	.word	0x08000dd7
 8000d7c:	08000e19 	.word	0x08000e19
 8000d80:	08000e1f 	.word	0x08000e1f
 8000d84:	08000e1f 	.word	0x08000e1f
 8000d88:	08000e1f 	.word	0x08000e1f
 8000d8c:	08000e1f 	.word	0x08000e1f
 8000d90:	08000e1f 	.word	0x08000e1f
 8000d94:	08000e1f 	.word	0x08000e1f
 8000d98:	08000e1f 	.word	0x08000e1f
 8000d9c:	08000e1f 	.word	0x08000e1f
 8000da0:	08000e1f 	.word	0x08000e1f
 8000da4:	08000e1f 	.word	0x08000e1f
 8000da8:	08000e1f 	.word	0x08000e1f
 8000dac:	08000e1f 	.word	0x08000e1f
 8000db0:	08000e1f 	.word	0x08000e1f
 8000db4:	08000dcd 	.word	0x08000dcd
 8000db8:	08000de1 	.word	0x08000de1
 8000dbc:	4a82      	ldr	r2, [pc, #520]	; (8000fc8 <HAL_GPIO_Init+0x2d8>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d013      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dc2:	e02c      	b.n	8000e1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	623b      	str	r3, [r7, #32]
          break;
 8000dca:	e029      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	623b      	str	r3, [r7, #32]
          break;
 8000dd4:	e024      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	3308      	adds	r3, #8
 8000ddc:	623b      	str	r3, [r7, #32]
          break;
 8000dde:	e01f      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	330c      	adds	r3, #12
 8000de6:	623b      	str	r3, [r7, #32]
          break;
 8000de8:	e01a      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000df2:	2304      	movs	r3, #4
 8000df4:	623b      	str	r3, [r7, #32]
          break;
 8000df6:	e013      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d105      	bne.n	8000e0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e00:	2308      	movs	r3, #8
 8000e02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69fa      	ldr	r2, [r7, #28]
 8000e08:	611a      	str	r2, [r3, #16]
          break;
 8000e0a:	e009      	b.n	8000e20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	615a      	str	r2, [r3, #20]
          break;
 8000e16:	e003      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
          break;
 8000e1c:	e000      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          break;
 8000e1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	2bff      	cmp	r3, #255	; 0xff
 8000e24:	d801      	bhi.n	8000e2a <HAL_GPIO_Init+0x13a>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	e001      	b.n	8000e2e <HAL_GPIO_Init+0x13e>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	2bff      	cmp	r3, #255	; 0xff
 8000e34:	d802      	bhi.n	8000e3c <HAL_GPIO_Init+0x14c>
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	e002      	b.n	8000e42 <HAL_GPIO_Init+0x152>
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	3b08      	subs	r3, #8
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	210f      	movs	r1, #15
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	401a      	ands	r2, r3
 8000e54:	6a39      	ldr	r1, [r7, #32]
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 8090 	beq.w	8000f90 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e70:	4b56      	ldr	r3, [pc, #344]	; (8000fcc <HAL_GPIO_Init+0x2dc>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a55      	ldr	r2, [pc, #340]	; (8000fcc <HAL_GPIO_Init+0x2dc>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b53      	ldr	r3, [pc, #332]	; (8000fcc <HAL_GPIO_Init+0x2dc>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e88:	4a51      	ldr	r2, [pc, #324]	; (8000fd0 <HAL_GPIO_Init+0x2e0>)
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a49      	ldr	r2, [pc, #292]	; (8000fd4 <HAL_GPIO_Init+0x2e4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d00d      	beq.n	8000ed0 <HAL_GPIO_Init+0x1e0>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a48      	ldr	r2, [pc, #288]	; (8000fd8 <HAL_GPIO_Init+0x2e8>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d007      	beq.n	8000ecc <HAL_GPIO_Init+0x1dc>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a47      	ldr	r2, [pc, #284]	; (8000fdc <HAL_GPIO_Init+0x2ec>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d101      	bne.n	8000ec8 <HAL_GPIO_Init+0x1d8>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	e004      	b.n	8000ed2 <HAL_GPIO_Init+0x1e2>
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e002      	b.n	8000ed2 <HAL_GPIO_Init+0x1e2>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e000      	b.n	8000ed2 <HAL_GPIO_Init+0x1e2>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed4:	f002 0203 	and.w	r2, r2, #3
 8000ed8:	0092      	lsls	r2, r2, #2
 8000eda:	4093      	lsls	r3, r2
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ee2:	493b      	ldr	r1, [pc, #236]	; (8000fd0 <HAL_GPIO_Init+0x2e0>)
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee6:	089b      	lsrs	r3, r3, #2
 8000ee8:	3302      	adds	r3, #2
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000efc:	4b38      	ldr	r3, [pc, #224]	; (8000fe0 <HAL_GPIO_Init+0x2f0>)
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	4937      	ldr	r1, [pc, #220]	; (8000fe0 <HAL_GPIO_Init+0x2f0>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	608b      	str	r3, [r1, #8]
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f0a:	4b35      	ldr	r3, [pc, #212]	; (8000fe0 <HAL_GPIO_Init+0x2f0>)
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	4933      	ldr	r1, [pc, #204]	; (8000fe0 <HAL_GPIO_Init+0x2f0>)
 8000f14:	4013      	ands	r3, r2
 8000f16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f24:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <HAL_GPIO_Init+0x2f0>)
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	492d      	ldr	r1, [pc, #180]	; (8000fe0 <HAL_GPIO_Init+0x2f0>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	60cb      	str	r3, [r1, #12]
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f32:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <HAL_GPIO_Init+0x2f0>)
 8000f34:	68da      	ldr	r2, [r3, #12]
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	4929      	ldr	r1, [pc, #164]	; (8000fe0 <HAL_GPIO_Init+0x2f0>)
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d006      	beq.n	8000f5a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f4c:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <HAL_GPIO_Init+0x2f0>)
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	4923      	ldr	r1, [pc, #140]	; (8000fe0 <HAL_GPIO_Init+0x2f0>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	604b      	str	r3, [r1, #4]
 8000f58:	e006      	b.n	8000f68 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <HAL_GPIO_Init+0x2f0>)
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	491f      	ldr	r1, [pc, #124]	; (8000fe0 <HAL_GPIO_Init+0x2f0>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d006      	beq.n	8000f82 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <HAL_GPIO_Init+0x2f0>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4919      	ldr	r1, [pc, #100]	; (8000fe0 <HAL_GPIO_Init+0x2f0>)
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	600b      	str	r3, [r1, #0]
 8000f80:	e006      	b.n	8000f90 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_GPIO_Init+0x2f0>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	4915      	ldr	r1, [pc, #84]	; (8000fe0 <HAL_GPIO_Init+0x2f0>)
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	3301      	adds	r3, #1
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f47f aeaf 	bne.w	8000d04 <HAL_GPIO_Init+0x14>
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	bf00      	nop
 8000faa:	372c      	adds	r7, #44	; 0x2c
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	10320000 	.word	0x10320000
 8000fb8:	10310000 	.word	0x10310000
 8000fbc:	10220000 	.word	0x10220000
 8000fc0:	10210000 	.word	0x10210000
 8000fc4:	10120000 	.word	0x10120000
 8000fc8:	10110000 	.word	0x10110000
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40010000 	.word	0x40010000
 8000fd4:	40010800 	.word	0x40010800
 8000fd8:	40010c00 	.word	0x40010c00
 8000fdc:	40011000 	.word	0x40011000
 8000fe0:	40010400 	.word	0x40010400

08000fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff4:	787b      	ldrb	r3, [r7, #1]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ffa:	887a      	ldrh	r2, [r7, #2]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001000:	e003      	b.n	800100a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001002:	887b      	ldrh	r3, [r7, #2]
 8001004:	041a      	lsls	r2, r3, #16
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	611a      	str	r2, [r3, #16]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e26c      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 8087 	beq.w	8001142 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001034:	4b92      	ldr	r3, [pc, #584]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 030c 	and.w	r3, r3, #12
 800103c:	2b04      	cmp	r3, #4
 800103e:	d00c      	beq.n	800105a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001040:	4b8f      	ldr	r3, [pc, #572]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 030c 	and.w	r3, r3, #12
 8001048:	2b08      	cmp	r3, #8
 800104a:	d112      	bne.n	8001072 <HAL_RCC_OscConfig+0x5e>
 800104c:	4b8c      	ldr	r3, [pc, #560]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001058:	d10b      	bne.n	8001072 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105a:	4b89      	ldr	r3, [pc, #548]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d06c      	beq.n	8001140 <HAL_RCC_OscConfig+0x12c>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d168      	bne.n	8001140 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e246      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107a:	d106      	bne.n	800108a <HAL_RCC_OscConfig+0x76>
 800107c:	4b80      	ldr	r3, [pc, #512]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a7f      	ldr	r2, [pc, #508]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	e02e      	b.n	80010e8 <HAL_RCC_OscConfig+0xd4>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10c      	bne.n	80010ac <HAL_RCC_OscConfig+0x98>
 8001092:	4b7b      	ldr	r3, [pc, #492]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a7a      	ldr	r2, [pc, #488]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	4b78      	ldr	r3, [pc, #480]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a77      	ldr	r2, [pc, #476]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e01d      	b.n	80010e8 <HAL_RCC_OscConfig+0xd4>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b4:	d10c      	bne.n	80010d0 <HAL_RCC_OscConfig+0xbc>
 80010b6:	4b72      	ldr	r3, [pc, #456]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a71      	ldr	r2, [pc, #452]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b6f      	ldr	r3, [pc, #444]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a6e      	ldr	r2, [pc, #440]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e00b      	b.n	80010e8 <HAL_RCC_OscConfig+0xd4>
 80010d0:	4b6b      	ldr	r3, [pc, #428]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a6a      	ldr	r2, [pc, #424]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b68      	ldr	r3, [pc, #416]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a67      	ldr	r2, [pc, #412]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d013      	beq.n	8001118 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fcec 	bl	8000acc <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fce8 	bl	8000acc <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e1fa      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	4b5d      	ldr	r3, [pc, #372]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0xe4>
 8001116:	e014      	b.n	8001142 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fcd8 	bl	8000acc <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fcd4 	bl	8000acc <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e1e6      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001132:	4b53      	ldr	r3, [pc, #332]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0x10c>
 800113e:	e000      	b.n	8001142 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d063      	beq.n	8001216 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800114e:	4b4c      	ldr	r3, [pc, #304]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800115a:	4b49      	ldr	r3, [pc, #292]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 030c 	and.w	r3, r3, #12
 8001162:	2b08      	cmp	r3, #8
 8001164:	d11c      	bne.n	80011a0 <HAL_RCC_OscConfig+0x18c>
 8001166:	4b46      	ldr	r3, [pc, #280]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d116      	bne.n	80011a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001172:	4b43      	ldr	r3, [pc, #268]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d005      	beq.n	800118a <HAL_RCC_OscConfig+0x176>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d001      	beq.n	800118a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e1ba      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118a:	4b3d      	ldr	r3, [pc, #244]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	4939      	ldr	r1, [pc, #228]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800119a:	4313      	orrs	r3, r2
 800119c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119e:	e03a      	b.n	8001216 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d020      	beq.n	80011ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a8:	4b36      	ldr	r3, [pc, #216]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ae:	f7ff fc8d 	bl	8000acc <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b6:	f7ff fc89 	bl	8000acc <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e19b      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c8:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d4:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	4927      	ldr	r1, [pc, #156]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	600b      	str	r3, [r1, #0]
 80011e8:	e015      	b.n	8001216 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fc6c 	bl	8000acc <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f8:	f7ff fc68 	bl	8000acc <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e17a      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	2b00      	cmp	r3, #0
 8001220:	d03a      	beq.n	8001298 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d019      	beq.n	800125e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <HAL_RCC_OscConfig+0x274>)
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001230:	f7ff fc4c 	bl	8000acc <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff fc48 	bl	8000acc <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e15a      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0f0      	beq.n	8001238 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001256:	2001      	movs	r0, #1
 8001258:	f000 fa9a 	bl	8001790 <RCC_Delay>
 800125c:	e01c      	b.n	8001298 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_RCC_OscConfig+0x274>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001264:	f7ff fc32 	bl	8000acc <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800126a:	e00f      	b.n	800128c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800126c:	f7ff fc2e 	bl	8000acc <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d908      	bls.n	800128c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e140      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000
 8001284:	42420000 	.word	0x42420000
 8001288:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800128c:	4b9e      	ldr	r3, [pc, #632]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1e9      	bne.n	800126c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80a6 	beq.w	80013f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012aa:	4b97      	ldr	r3, [pc, #604]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10d      	bne.n	80012d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	4b94      	ldr	r3, [pc, #592]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a93      	ldr	r2, [pc, #588]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80012bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c0:	61d3      	str	r3, [r2, #28]
 80012c2:	4b91      	ldr	r3, [pc, #580]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ce:	2301      	movs	r3, #1
 80012d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d2:	4b8e      	ldr	r3, [pc, #568]	; (800150c <HAL_RCC_OscConfig+0x4f8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d118      	bne.n	8001310 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012de:	4b8b      	ldr	r3, [pc, #556]	; (800150c <HAL_RCC_OscConfig+0x4f8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a8a      	ldr	r2, [pc, #552]	; (800150c <HAL_RCC_OscConfig+0x4f8>)
 80012e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ea:	f7ff fbef 	bl	8000acc <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f2:	f7ff fbeb 	bl	8000acc <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b64      	cmp	r3, #100	; 0x64
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e0fd      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001304:	4b81      	ldr	r3, [pc, #516]	; (800150c <HAL_RCC_OscConfig+0x4f8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d106      	bne.n	8001326 <HAL_RCC_OscConfig+0x312>
 8001318:	4b7b      	ldr	r3, [pc, #492]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	4a7a      	ldr	r2, [pc, #488]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6213      	str	r3, [r2, #32]
 8001324:	e02d      	b.n	8001382 <HAL_RCC_OscConfig+0x36e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10c      	bne.n	8001348 <HAL_RCC_OscConfig+0x334>
 800132e:	4b76      	ldr	r3, [pc, #472]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	4a75      	ldr	r2, [pc, #468]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001334:	f023 0301 	bic.w	r3, r3, #1
 8001338:	6213      	str	r3, [r2, #32]
 800133a:	4b73      	ldr	r3, [pc, #460]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	4a72      	ldr	r2, [pc, #456]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001340:	f023 0304 	bic.w	r3, r3, #4
 8001344:	6213      	str	r3, [r2, #32]
 8001346:	e01c      	b.n	8001382 <HAL_RCC_OscConfig+0x36e>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2b05      	cmp	r3, #5
 800134e:	d10c      	bne.n	800136a <HAL_RCC_OscConfig+0x356>
 8001350:	4b6d      	ldr	r3, [pc, #436]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	4a6c      	ldr	r2, [pc, #432]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	6213      	str	r3, [r2, #32]
 800135c:	4b6a      	ldr	r3, [pc, #424]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	4a69      	ldr	r2, [pc, #420]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6213      	str	r3, [r2, #32]
 8001368:	e00b      	b.n	8001382 <HAL_RCC_OscConfig+0x36e>
 800136a:	4b67      	ldr	r3, [pc, #412]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4a66      	ldr	r2, [pc, #408]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001370:	f023 0301 	bic.w	r3, r3, #1
 8001374:	6213      	str	r3, [r2, #32]
 8001376:	4b64      	ldr	r3, [pc, #400]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	4a63      	ldr	r2, [pc, #396]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800137c:	f023 0304 	bic.w	r3, r3, #4
 8001380:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d015      	beq.n	80013b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138a:	f7ff fb9f 	bl	8000acc <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001390:	e00a      	b.n	80013a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001392:	f7ff fb9b 	bl	8000acc <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e0ab      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a8:	4b57      	ldr	r3, [pc, #348]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0ee      	beq.n	8001392 <HAL_RCC_OscConfig+0x37e>
 80013b4:	e014      	b.n	80013e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b6:	f7ff fb89 	bl	8000acc <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013bc:	e00a      	b.n	80013d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013be:	f7ff fb85 	bl	8000acc <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e095      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d4:	4b4c      	ldr	r3, [pc, #304]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1ee      	bne.n	80013be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d105      	bne.n	80013f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e6:	4b48      	ldr	r3, [pc, #288]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	4a47      	ldr	r2, [pc, #284]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80013ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 8081 	beq.w	80014fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013fc:	4b42      	ldr	r3, [pc, #264]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 030c 	and.w	r3, r3, #12
 8001404:	2b08      	cmp	r3, #8
 8001406:	d061      	beq.n	80014cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d146      	bne.n	800149e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001410:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <HAL_RCC_OscConfig+0x4fc>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001416:	f7ff fb59 	bl	8000acc <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141e:	f7ff fb55 	bl	8000acc <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e067      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001430:	4b35      	ldr	r3, [pc, #212]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f0      	bne.n	800141e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001444:	d108      	bne.n	8001458 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001446:	4b30      	ldr	r3, [pc, #192]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	492d      	ldr	r1, [pc, #180]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001458:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a19      	ldr	r1, [r3, #32]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	430b      	orrs	r3, r1
 800146a:	4927      	ldr	r1, [pc, #156]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <HAL_RCC_OscConfig+0x4fc>)
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7ff fb29 	bl	8000acc <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147e:	f7ff fb25 	bl	8000acc <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e037      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0x46a>
 800149c:	e02f      	b.n	80014fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149e:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <HAL_RCC_OscConfig+0x4fc>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fb12 	bl	8000acc <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ac:	f7ff fb0e 	bl	8000acc <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e020      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x498>
 80014ca:	e018      	b.n	80014fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e013      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d106      	bne.n	80014fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40021000 	.word	0x40021000
 800150c:	40007000 	.word	0x40007000
 8001510:	42420060 	.word	0x42420060

08001514 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0d0      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001528:	4b6a      	ldr	r3, [pc, #424]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d910      	bls.n	8001558 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 0207 	bic.w	r2, r3, #7
 800153e:	4965      	ldr	r1, [pc, #404]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001546:	4b63      	ldr	r3, [pc, #396]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0b8      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d020      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001570:	4b59      	ldr	r3, [pc, #356]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	4a58      	ldr	r2, [pc, #352]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800157a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001588:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	4a52      	ldr	r2, [pc, #328]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001592:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001594:	4b50      	ldr	r3, [pc, #320]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	494d      	ldr	r1, [pc, #308]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d040      	beq.n	8001634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d107      	bne.n	80015ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ba:	4b47      	ldr	r3, [pc, #284]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d115      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e07f      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d2:	4b41      	ldr	r3, [pc, #260]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d109      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e073      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e2:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e06b      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f2:	4b39      	ldr	r3, [pc, #228]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f023 0203 	bic.w	r2, r3, #3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4936      	ldr	r1, [pc, #216]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001604:	f7ff fa62 	bl	8000acc <HAL_GetTick>
 8001608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160a:	e00a      	b.n	8001622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800160c:	f7ff fa5e 	bl	8000acc <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f241 3288 	movw	r2, #5000	; 0x1388
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e053      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001622:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 020c 	and.w	r2, r3, #12
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	429a      	cmp	r2, r3
 8001632:	d1eb      	bne.n	800160c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001634:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d210      	bcs.n	8001664 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 0207 	bic.w	r2, r3, #7
 800164a:	4922      	ldr	r1, [pc, #136]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001652:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e032      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	4916      	ldr	r1, [pc, #88]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	4313      	orrs	r3, r2
 8001680:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d009      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	490e      	ldr	r1, [pc, #56]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016a2:	f000 f821 	bl	80016e8 <HAL_RCC_GetSysClockFreq>
 80016a6:	4602      	mov	r2, r0
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	490a      	ldr	r1, [pc, #40]	; (80016dc <HAL_RCC_ClockConfig+0x1c8>)
 80016b4:	5ccb      	ldrb	r3, [r1, r3]
 80016b6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ba:	4a09      	ldr	r2, [pc, #36]	; (80016e0 <HAL_RCC_ClockConfig+0x1cc>)
 80016bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_RCC_ClockConfig+0x1d0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff f9c0 	bl	8000a48 <HAL_InitTick>

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40022000 	.word	0x40022000
 80016d8:	40021000 	.word	0x40021000
 80016dc:	0800183c 	.word	0x0800183c
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001702:	4b1e      	ldr	r3, [pc, #120]	; (800177c <HAL_RCC_GetSysClockFreq+0x94>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b04      	cmp	r3, #4
 8001710:	d002      	beq.n	8001718 <HAL_RCC_GetSysClockFreq+0x30>
 8001712:	2b08      	cmp	r3, #8
 8001714:	d003      	beq.n	800171e <HAL_RCC_GetSysClockFreq+0x36>
 8001716:	e027      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <HAL_RCC_GetSysClockFreq+0x98>)
 800171a:	613b      	str	r3, [r7, #16]
      break;
 800171c:	e027      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	0c9b      	lsrs	r3, r3, #18
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	4a17      	ldr	r2, [pc, #92]	; (8001784 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001728:	5cd3      	ldrb	r3, [r2, r3]
 800172a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d010      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <HAL_RCC_GetSysClockFreq+0x94>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	0c5b      	lsrs	r3, r3, #17
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	4a11      	ldr	r2, [pc, #68]	; (8001788 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001742:	5cd3      	ldrb	r3, [r2, r3]
 8001744:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <HAL_RCC_GetSysClockFreq+0x98>)
 800174a:	fb02 f203 	mul.w	r2, r2, r3
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	fbb2 f3f3 	udiv	r3, r2, r3
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	e004      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a0c      	ldr	r2, [pc, #48]	; (800178c <HAL_RCC_GetSysClockFreq+0xa4>)
 800175c:	fb02 f303 	mul.w	r3, r2, r3
 8001760:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	613b      	str	r3, [r7, #16]
      break;
 8001766:	e002      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_RCC_GetSysClockFreq+0x98>)
 800176a:	613b      	str	r3, [r7, #16]
      break;
 800176c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800176e:	693b      	ldr	r3, [r7, #16]
}
 8001770:	4618      	mov	r0, r3
 8001772:	371c      	adds	r7, #28
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	007a1200 	.word	0x007a1200
 8001784:	0800184c 	.word	0x0800184c
 8001788:	0800185c 	.word	0x0800185c
 800178c:	003d0900 	.word	0x003d0900

08001790 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <RCC_Delay+0x34>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <RCC_Delay+0x38>)
 800179e:	fba2 2303 	umull	r2, r3, r2, r3
 80017a2:	0a5b      	lsrs	r3, r3, #9
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	fb02 f303 	mul.w	r3, r2, r3
 80017aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017ac:	bf00      	nop
  }
  while (Delay --);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1e5a      	subs	r2, r3, #1
 80017b2:	60fa      	str	r2, [r7, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f9      	bne.n	80017ac <RCC_Delay+0x1c>
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	20000000 	.word	0x20000000
 80017c8:	10624dd3 	.word	0x10624dd3

080017cc <__libc_init_array>:
 80017cc:	b570      	push	{r4, r5, r6, lr}
 80017ce:	2600      	movs	r6, #0
 80017d0:	4d0c      	ldr	r5, [pc, #48]	; (8001804 <__libc_init_array+0x38>)
 80017d2:	4c0d      	ldr	r4, [pc, #52]	; (8001808 <__libc_init_array+0x3c>)
 80017d4:	1b64      	subs	r4, r4, r5
 80017d6:	10a4      	asrs	r4, r4, #2
 80017d8:	42a6      	cmp	r6, r4
 80017da:	d109      	bne.n	80017f0 <__libc_init_array+0x24>
 80017dc:	f000 f822 	bl	8001824 <_init>
 80017e0:	2600      	movs	r6, #0
 80017e2:	4d0a      	ldr	r5, [pc, #40]	; (800180c <__libc_init_array+0x40>)
 80017e4:	4c0a      	ldr	r4, [pc, #40]	; (8001810 <__libc_init_array+0x44>)
 80017e6:	1b64      	subs	r4, r4, r5
 80017e8:	10a4      	asrs	r4, r4, #2
 80017ea:	42a6      	cmp	r6, r4
 80017ec:	d105      	bne.n	80017fa <__libc_init_array+0x2e>
 80017ee:	bd70      	pop	{r4, r5, r6, pc}
 80017f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80017f4:	4798      	blx	r3
 80017f6:	3601      	adds	r6, #1
 80017f8:	e7ee      	b.n	80017d8 <__libc_init_array+0xc>
 80017fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80017fe:	4798      	blx	r3
 8001800:	3601      	adds	r6, #1
 8001802:	e7f2      	b.n	80017ea <__libc_init_array+0x1e>
 8001804:	08001860 	.word	0x08001860
 8001808:	08001860 	.word	0x08001860
 800180c:	08001860 	.word	0x08001860
 8001810:	08001864 	.word	0x08001864

08001814 <memset>:
 8001814:	4603      	mov	r3, r0
 8001816:	4402      	add	r2, r0
 8001818:	4293      	cmp	r3, r2
 800181a:	d100      	bne.n	800181e <memset+0xa>
 800181c:	4770      	bx	lr
 800181e:	f803 1b01 	strb.w	r1, [r3], #1
 8001822:	e7f9      	b.n	8001818 <memset+0x4>

08001824 <_init>:
 8001824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001826:	bf00      	nop
 8001828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800182a:	bc08      	pop	{r3}
 800182c:	469e      	mov	lr, r3
 800182e:	4770      	bx	lr

08001830 <_fini>:
 8001830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001832:	bf00      	nop
 8001834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001836:	bc08      	pop	{r3}
 8001838:	469e      	mov	lr, r3
 800183a:	4770      	bx	lr
